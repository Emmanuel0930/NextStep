/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

// Manejo de notificaciones de racha
self.addEventListener('notificationclick', (event) => {
  console.log('Notificación clickeada:', event.notification);
  
  event.notification.close();
  
  // Abrir la aplicación cuando se hace clic en la notificación
  event.waitUntil(
    clients.matchAll().then((clientsList) => {
      const client = clientsList.find(c => c.url.includes(self.location.origin));
      
      if (client) {
        // Si ya está abierta, enfocarla
        return client.focus();
      } else {
        // Si no está abierta, abrirla
        return clients.openWindow('/');
      }
    })
  );
});

// Escuchar mensajes para programar notificaciones
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'SCHEDULE_STREAK_NOTIFICATION') {
    const { racha, horaNotificacion } = event.data;
    programarNotificacionRacha(racha, horaNotificacion);
  }
});

// Función para programar notificaciones de racha
function programarNotificacionRacha(racha, horaNotificacion) {
  // Esta función se ejecutará cuando el backend programe notificaciones
  // Por ahora, solo registramos el evento
  console.log('Programando notificación de racha:', { racha, horaNotificacion });
}

// Mostrar notificación de racha personalizada
function mostrarNotificacionRacha(rachaActual, mensaje) {
  const opciones = {
    body: mensaje || `¡Mantén tu racha de ${rachaActual} días! 🔥`,
    icon: '/favicon.ico',
    badge: '/favicon.ico',
    tag: 'nextstep-streak',
    requireInteraction: true,
    vibrate: [200, 100, 200, 100, 200],
    actions: [
      {
        action: 'abrir',
        title: 'Abrir NextStep',
        icon: '/favicon.ico'
      },
      {
        action: 'recordar',
        title: 'Recordar después',
        icon: '/favicon.ico'
      }
    ],
    data: {
      url: '/',
      racha: rachaActual,
      timestamp: Date.now()
    }
  };

  return self.registration.showNotification('🔥 NextStep - ¡Mantén tu racha!', opciones);
}
